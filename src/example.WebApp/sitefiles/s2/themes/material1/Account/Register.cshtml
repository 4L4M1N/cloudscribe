@model cloudscribe.Core.Web.ViewModels.Account.RegisterViewModel
@using cloudscribe.Core.Web
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Http.Authentication
@inject IStringLocalizer<CloudscribeCore> sr
@{
    var socFormat = sr["Register in using your {0} account"];
}
@section Meta {
    <meta name="robots" content="noindex" />
}
@if (Model.RecaptchaSiteKey.Length > 0)
{
    <script src='https://www.google.com/recaptcha/api.js'></script>
}
@if (Model.UseInvisibleCaptcha)
{
    <script>
        function onCaptchaSubmit(token) { document.getElementById("register-form").submit(); }
    </script>
}
<h2>@ViewData["Title"]</h2>
@if (Model.RegistrationPreamble.Length > 0)
{
    <div class="row">
        <div class="col s12">
            @Html.Raw(Model.RegistrationPreamble)
        </div>
    </div>
}
<div class="row">
    <form id="register-form" asp-controller="Account" asp-action="Register" method="post" class="col s12" role="form">
        <input asp-for="UserId" type="hidden" />
        <h4>@sr["Create a new account."]</h4>
        <div asp-validation-summary="All" class="text-danger"></div>

        @if (!Model.UseEmailForLogin)
        {
            <div class="row">
                <div class="input-field col s6">
                    <input asp-for="Username" class="form-control" />
                    <label asp-for="Username" class="col-md-2 control-label">@sr["Username"]</label>
                    <span asp-validation-for="Username" class="text-danger"></span>
                    @Html.ValidationMessage("usernameerror", new { @class = "text-danger" })
                </div>
            </div>

        }
        <div class="row">
            <div class="input-field col s6">
                <input asp-for="Email" class="form-control" />
                <label asp-for="Email" class="col-md-2 control-label">@sr["Email"]</label>
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s6">
                <input asp-for="Password" class="form-control" />
                <label asp-for="Password" class="col-md-2 control-label">@sr["Password"]</label>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s6">
                <input asp-for="ConfirmPassword" class="form-control" />
                <label asp-for="ConfirmPassword" class="col-md-2 control-label">@sr["Confirm Password"]</label>
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>
        </div>
        @if (Model.RegistrationAgreement.Length > 0)
        {
            <div class="row">
                <div class="col s12 agreementcontainer">
                    @Html.Raw(Model.RegistrationAgreement)
                </div>
            </div>
            <div class="row">
                <div class="input-field col s6">
                    <input type="hidden" asp-for="AgreementRequired" />
                        <input asp-for="AgreeToTerms" data-val-enforcetrue='@sr["You must agree to the terms."]' />
                        <label asp-for="AgreeToTerms">@sr["I Agree to these terms of use"]</label>
                        <span asp-validation-for="AgreeToTerms" class="text-danger"></span>
                        @Html.ValidationMessage("agreementerror", new { @class = "text-danger" })
                    
                </div>
            </div>
        }
        else
        {
            <input name="AgreeToTerms" value="true" type="hidden" />
        }
        @if (Model.RecaptchaSiteKey.Length > 0 && !Model.UseInvisibleCaptcha)
        {
            <div class="row">
                <div class="input-field col s6">
                    <div class="g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey"></div>
                    @Html.ValidationMessage("recaptchaerror", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="row">
            <div class="input-field col s6">
                @if (Model.RecaptchaSiteKey.Length > 0 && Model.UseInvisibleCaptcha)
                {
                    <button class="btn g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey" data-callback='onCaptchaSubmit'>@sr["Register"]</button>
                }
                else
                {
                    <button name="submit" type="submit" class="btn">@sr["Register"]</button>
                }
                <input type="hidden" asp-for="UseEmailForLogin" />
            </div>
        </div>
    </form>
</div>


@{
            var LoginProviders = Model.ExternalAuthenticationList.ToList();
            if (LoginProviders.Count > 0)
            {
        <section id="socialLoginForm">
            <h4>@sr["Use an existing account"]</h4>
            <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl='@ViewData["ReturnUrl"]' method="post" class="" role="form">
                <div id="socialLoginList">
                    <p>
                        @foreach (AuthenticationDescription p in LoginProviders)
                        {
                            <button type="submit" class="btn" id="@p.AuthenticationScheme" name="provider" value="@p.AuthenticationScheme"
                                    title="@string.Format(socFormat,p.DisplayName)">
                                @p.AuthenticationScheme
                            </button>
                        }
                    </p>
                </div>
            </form>
        </section>
    }
}
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
<script src="~/cscsr/enforcetruevalidator"></script>
<script src="~/cscsr/requiredwhenvalidator"></script>
}
