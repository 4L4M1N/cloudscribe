@model cloudscribe.Core.Web.ViewModels.SiteSettings.SiteBasicSettingsViewModel

@{

}
<p class="bg-danger">
    This view was created temporarily in /Views/SiteAdmin to override the one in /Views/Sys/SiteAdmin.
    This is temporary while I'm working on some new autocomplete functionality.
    Whereas the default view has cascading dropdown lists for country/state, in this one I'm changing to textboxes with autocomplete.
    In some cases this will be preferrable when we need users to provide that data, because the dropdowns are populated from lists in 
    the database which we know are not complete or up to date for lots of countries.
    When using dropdown lists there is no way for the user to provide a value that doesn't exist in the database, so we need to use 
    textboxes in those scenarios so they can put in something if it is not suggested by the auto complete.
</p>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.SiteId)
        @Html.HiddenFor(model => model.SiteGuid)
        @Html.HiddenFor(model => model.ReturnPageNumber)
        <div class="form-group">
            @Html.LabelFor(model => model.SiteName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SiteName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SiteName, "", new { @class = "text-danger" })
            </div>
        </div>
@if (AppSettings.UseFoldersInsteadOfHostnamesForMultipleSites) {
        <div class="form-group">
            @Html.LabelFor(model => model.SiteFolderName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SiteFolderName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SiteFolderName, "", new { @class = "text-danger" })
                @Html.ValidationMessage("foldererror", new { @class = "text-danger" })
            </div>
        </div>
}
else
{
    <div class="form-group">
        @Html.LabelFor(model => model.HostName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HostName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HostName, "", new { @class = "text-danger" })
            @Html.ValidationMessage("hosterror", new { @class = "text-danger" })
            @Html.ActionLink(CommonResources.DomainMappings, "SiteHostMappings", "SiteAdmin",
            new { siteGuid = Model.SiteGuid, slp = Model.ReturnPageNumber },
                new { @class = "hostmap" })
        </div>
    </div>
}
        <div class="form-group">
            @Html.LabelFor(model => model.TimeZoneId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TimeZoneId,
                           Model.AllTimeZones.Select(x =>
                                new SelectListItem
                                {
                                    Text = x.DisplayName,
                                    Value = x.Id
                                    ,
                                    Selected = Model.TimeZoneId == x.Id
                                }),
                                new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TimeZoneId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Slogan, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Slogan, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Slogan, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyStreetAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyStreetAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyStreetAddress, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyStreetAddress2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyStreetAddress2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyStreetAddress2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyLocality, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyLocality, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyLocality, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyCountry, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                @Html.EditorFor(model => model.CompanyCountry, new { 
                htmlAttributes = new { 
                @class = "form-control", 
                @autocomplete = "off",
                @maxlength = "2",
                @data_autosuggest_serviceurl = Url.Content("~/CoreData/CountryAutoSuggestJson"),
                @data_autosuggest_label_prop = "Name",
                @data_autosuggest_value_prop = "ISOCode2"
                } })
                
                @Html.ValidationMessageFor(model => model.CompanyCountry, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyRegion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                @Html.EditorFor(model => model.CompanyRegion, 
                new { htmlAttributes = new { 
                @class = "form-control" ,
                @autocomplete = "off",
                @maxlength = "7",
                @data_autosuggest_serviceurl = Url.Content("~/CoreData/StateAutoSuggestJson"),
                @data_autosuggest_label_prop = "Name",
                @data_autosuggest_value_prop = "Code",
                @data_autosuggest_parentid = "CompanyCountry",
                @data_autosuggest_parent_data_name = "countryCode"
                } })

                @Html.ValidationMessageFor(model => model.CompanyRegion, "", new { @class = "text-danger" })  
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyPostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyPostalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyPostalCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyPhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyPhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyPhone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyFax, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyFax, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyFax, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyPublicEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyPublicEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyPublicEmail, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RecaptchaPublicKey, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecaptchaPublicKey, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecaptchaPublicKey, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RecaptchaPrivateKey, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecaptchaPrivateKey, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecaptchaPrivateKey, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RequireCaptchaOnRegistration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="checkbox col-md-10">
                @Html.CheckBoxForBootstrap("RequireCaptchaOnRegistration", Model.RequireCaptchaOnRegistration)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RequireCaptchaOnLogin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="checkbox col-md-10">
                @Html.CheckBoxForBootstrap("RequireCaptchaOnLogin", Model.RequireCaptchaOnLogin)
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.ClosedMessage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ClosedMessage,  
                new { @rows = 5, @class = "form-control",
                @data_ckeditor_unobtrusive = "",
                @data_ckeditor_unobtrusive_config_url = Url.Content(AppSettings.CkEditorCustomConfigPath),
                @data_ckeditor_unobtrusive_config_toolbar = "Full",
                @data_ckeditor_unobtrusive_config_language = System.Globalization.CultureInfo.CurrentUICulture.Name
                } )
                @Html.ValidationMessageFor(model => model.ClosedMessage, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsClosed, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="checkbox col-md-10"> 
                @Html.CheckBoxForBootstrap("IsClosed", Model.IsClosed)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@CommonResources.Save" class="btn btn-default" />
                @if ((Model.ShowDelete) && (Model.SiteGuid != Guid.Empty))
                {
                    <button name="button" type="button" class="btn btn-default"
                            onclick="javascript: if(confirm('@Html.FormatValue(Model.SiteName, CommonResources.ConfirmSiteDeleteFormat)')) {$('#deleteform').submit();}">
                        @CommonResources.Delete
                    </button>
                    @Html.ValidationMessage("deleteerror", new { @class = "text-danger" })
                }
            </div>
        </div>

        
    </div>
}
@if ((Model.ShowDelete)&&(Model.SiteGuid != Guid.Empty))
{
    using (Html.BeginForm("SiteDelete", "SiteAdmin", FormMethod.Post, new { @id = "deleteform", @class = "form-inline" }))
    { @Html.AntiForgeryToken()
        @Html.Hidden("siteId", Model.SiteId)
        @Html.Hidden("siteGuid", Model.SiteGuid)
        @Html.Hidden("returnPageNumber", Model.ReturnPageNumber)

    }
}
<div>
    @Html.ActionLink(
        @CommonResources.BackToSiteList,
        "SiteList",
        new { pageNumber = Model.ReturnPageNumber },
        new { @class = "btn btn-default" }
        )
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
