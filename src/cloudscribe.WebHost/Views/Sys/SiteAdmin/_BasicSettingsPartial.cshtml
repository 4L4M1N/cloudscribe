@model cloudscribe.Core.Web.ViewModels.SiteSettings.SiteBasicSettingsViewModel

@{

}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.SiteId)
        @Html.HiddenFor(model => model.SiteGuid)
        @Html.HiddenFor(model => model.ReturnPageNumber)
        <div class="form-group">
            @Html.LabelFor(model => model.SiteName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SiteName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SiteName, "", new { @class = "text-danger" })
            </div>
        </div>
@if (AppSettings.UseFoldersInsteadOfHostnamesForMultipleSites) {
        <div class="form-group">
            @Html.LabelFor(model => model.SiteFolderName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SiteFolderName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SiteFolderName, "", new { @class = "text-danger" })
                @Html.ValidationMessage("foldererror", new { @class = "text-danger" })
            </div>
        </div>
}
else
{
    <div class="form-group">
        @Html.LabelFor(model => model.HostName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HostName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HostName, "", new { @class = "text-danger" })
        </div>
    </div>
}
        <div class="form-group">
            @Html.LabelFor(model => model.TimeZoneId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TimeZoneId,
                           Model.AllTimeZones.Select(x =>
                                new SelectListItem
                                {
                                    Text = x.DisplayName,
                                    Value = x.Id
                                    ,
                                    Selected = Model.TimeZoneId == x.Id
                                }),
                                new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TimeZoneId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Slogan, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Slogan, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Slogan, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyStreetAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyStreetAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyStreetAddress, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyStreetAddress2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyStreetAddress2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyStreetAddress2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyLocality, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyLocality, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyLocality, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyCountry, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CompanyCountry, Model.AvailableCountries, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CompanyCountry, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyRegion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyRegion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyRegion, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyPostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyPostalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyPostalCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyPhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyPhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyPhone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyFax, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyFax, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyFax, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyPublicEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyPublicEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyPublicEmail, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@CommonResources.Save" class="btn btn-default" />
                @if ((Model.ShowDelete) && (Model.SiteGuid != Guid.Empty))
                {
                    <button name="button" type="button" class="btn btn-default"
                            onclick="javascript: if(confirm('@Html.FormatValue(Model.SiteName, CommonResources.ConfirmSiteDeleteFormat)')) {$('#deleteform').submit();}">
                        @CommonResources.Delete
                    </button>
                    @Html.ValidationMessage("deleteerror", new { @class = "text-danger" })
                }
            </div>
        </div>
    </div>
}
@if ((Model.ShowDelete)&&(Model.SiteGuid != Guid.Empty))
{
    using (Html.BeginForm("SiteDelete", "SiteAdmin", FormMethod.Post, new { @id = "deleteform", @class = "form-inline" }))
    { @Html.AntiForgeryToken()
        @Html.Hidden("siteId", Model.SiteId)
        @Html.Hidden("siteGuid", Model.SiteGuid)
        @Html.Hidden("returnPageNumber", Model.ReturnPageNumber)

    }
}
<div>
    @Html.ActionLink(
        @CommonResources.BackToSiteList,
        "SiteList",
        new { pageNumber = Model.ReturnPageNumber },
        new { @class = "btn btn-default" }
        )
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
