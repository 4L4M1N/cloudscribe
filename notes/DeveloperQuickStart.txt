To work with the solution use Visual Studio 2015 with the latast beta7 tooling installed

The WebHost project is the web application project, it must be the startup project in the solution.

Copy the file config.json file in the WebHost project and rename it as config.local.overrides.json
This file is in our gitexclude so you can put your connection string there without it going into the repo.

Create an MS SQL database with sql authentication and set the connection string in the MSSQLConnectionOptions section of your config file.

Rebuild the solution in Visual Studio 2015, that should pull in all the needed packages from NuGet as well as compiling the code.

Right click the WebHost project and choose View > View In Browser

Once the site is open in the Web Browser, it will likely have errors since the db is not yet populated, visit /Setup to create/update the db schema and to create the first site.

It is always safe to visit /Setup, any time you pull updates from the repository and rebuild the solution its a good idea to visit /Setup again to run any upgrade scripts. It will never re-run scripts that it has already run.

After that you should be able to login as admin@admin.com with the password admin

When you do login as admin a new Menu Item for Administration should appear at the top of the page.

This is a work in progress, many things are not ready for prime time yet. See also ProjectGoals.txt but understand that we have not yet achieved all those goals, we are in early stages of development.

Note that the plan for cloudscribe core is to be distributed via NuGet, one would start with an empty asp.net project and pull it in. The WebHost project is not going to be included in NuGet, it represents what we want the user's web app project to have after pulling in the NuGet. The views and integration code will be added by NuGet, or that is the goal but not completed yet.
